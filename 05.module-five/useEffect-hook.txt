useEffect is a React Hook that lets you synchronize a component with an external system.

useEffect returns undefined.


Synchronize a component with an external system: - 

    Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.


Synatax -> useEffect(setup, dependencies?)

    setup - It is a function with the Effect's logic. Setup function may also optionally return a cleanup function. When your component is added to the DOM, React will run the setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.

    dependencies (optional) - The list (array) of all reactive values referenced inside of the setup code. Reactive values include props, state, and all the variables and functions declared directly inside your component body. The array of dependencies must have a constant number of items and be written inline like [dep1, dep2, dep3]. React will compare each dependency with its previous value using the Object.is comparison. If you omit this argument, your Effect will re-run after every re-render of the component.


Points to remember while using useEffect hook: - 

    - useEffect is a Hook, so you can only call it at the top level of your component or your own Hooks. You can’t call it inside loops or conditions.

    - If you’re not trying to synchronize with some external system, you probably don’t need an Effect.

    - When Strict Mode is on, React will run one extra development-only setup+cleanup cycle before the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing.

    - If some of your dependencies are objects or functions defined inside the component, there is a risk that they will cause the Effect to re-run more often than needed. To fix this, remove unnecessary object and function dependencies.

    - Effects only run on the client. They don’t run during server rendering.


Usage of useEffect: - 

    Some components need to stay connected to the network, some browser API, or a third-party library, while they are displayed on the page. These systems aren’t controlled by React, so they are called external.

    Example - 

        import { useEffect } from 'react';
        import { createConnection } from './chat.js';

        function ChatRoom({ roomId }) {
            const [serverUrl, setServerUrl] = useState('https://localhost:1234');

            function cleanupFunction(connection) {
                connection.disconnect();
            }

            function setupFunction() {
                const connection = createConnection(serverUrl, roomId);
                connection.connect();

                return cleanupFunction(connection);
            }

            useEffect(setupFunction, [serverUrl, roomId] // array of dependencies);
        }

    A `setupFunction` function with setup code that connects to that system.
        - It should return a cleanup function(cleanupFunction) with cleanup code that disconnects from that system.

    An array of dependencies including every value from your component used inside of those functions.
    

    React calls your setupFunction and setupFunction functions whenever it’s necessary, which may happen multiple times: -

        - Setup code runs when your component is added to the page (mounts).

        - After every re-render of your component where the dependencies have changed: -

            - First, your cleanup code runs with the old props and state.
            - Then, your setup code runs with the new props and state.

        - Your cleanup code runs one final time after your component is removed from the page (unmounts).